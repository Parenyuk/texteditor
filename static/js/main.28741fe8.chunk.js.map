{"version":3,"sources":["components/Content/ChangeTextProperties/ChangeTextProperties.tsx","components/Content/Content.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fontSizeArray","key","value","colorArray","bgColorArray","ChangeTextProperties","formatText","toJSON","className","onChange","e","currentTarget","innerHTML","map","f","c","onClick","Content","useState","text","fontSize","color","backgroundColor","obj","setObj","json","JSON","stringify","console","log","sCnd","document","execCommand","navigator","clipboard","readText","then","newObj","contentEditable","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uQAOMA,G,MAAgB,CAClB,CAACC,IAAK,EAAGC,MAAO,aAAc,CAACD,IAAK,EAAGC,MAAO,QAAS,CAACD,IAAK,EAAGC,MAAO,QAAS,CAC5ED,IAAK,EACLC,MAAO,QACR,CAACD,IAAK,EAAGC,MAAO,QACnB,CAACD,IAAK,EAAGC,MAAO,QAAS,CAACD,IAAK,EAAGC,MAAO,QAAS,CAACD,IAAK,EAAGC,MAAO,UAGhEC,EAAa,CACf,QAAS,MAAO,QAAS,SAAU,OAAQ,QAAS,QAAS,cAAe,QAG1EC,EAAe,CACjB,mBAAoB,MAAO,QAAS,SAAU,OAAQ,QAAS,QAAS,cAAe,QAG9EC,EAAuB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,OAC/C,OACI,mCACI,sBAAKC,UAAW,eAAhB,UACI,yBAAQA,UAAW,cACXC,SAAU,SAACC,GAAD,OAAOJ,EAAW,WAAYI,EAAEC,eAAeD,EAAEC,cAAcT,OAAOU,YADxF,sBAGKZ,EAAca,KAAI,SAAAC,GAAC,OAAI,wBAAoBZ,MAAOY,EAAEb,IAA7B,SAAmCa,EAAEZ,OAAxBY,EAAEb,WAE3C,yBAAQO,UAAW,cACXC,SAAU,SAACC,GAAD,OAAOJ,EAAW,YAAaI,EAAEC,cAAcT,QADjE,mBAEKC,EAAWU,KAAI,SAAAE,GAAC,OAAI,wBAAgBb,MAAOa,EAAvB,SAA2BA,GAAdA,SAEtC,yBAAQP,UAAW,cAAeC,SAAU,SAACC,GAAD,OAAOJ,EAAW,YAAaI,EAAEC,cAAcT,QAA3F,6BAEKE,EAAaS,KAAI,SAAAE,GAAC,OAAI,wBAAgBb,MAAOa,EAAvB,SAA2BA,GAAdA,SAGxC,wBAAQC,QAAST,EAAQC,UAAW,eAApC,mCCnCHS,G,MAAU,WAAO,IAAD,EAGHC,mBAAS,CAC3BC,KAAM,GACNC,SAAU,OACVC,MAAO,QACPC,gBAAiB,UAPI,mBAGlBC,EAHkB,KAGbC,EAHa,KA4CzB,OAEI,qCACI,cAAC,EAAD,CAAsBjB,OARf,WACX,IAAMkB,EAAOC,KAAKC,UAAUJ,GAC5BK,QAAQC,IAAIJ,IAM8BnB,WApC3B,SAACwB,EAAc5B,GAI9B6B,SAASC,YAAYF,GAAM,EAAO5B,GAClC6B,SAASC,YAAY,QACrBC,UAAUC,UAAUC,WAAWC,MAAK,SAAAjB,GAChC,OAAQW,GACJ,IAAK,WACD,IAAIO,EAAM,2BAAOd,GAAP,IAAYH,SAAUlB,EAAOiB,SACvCK,EAAOa,GACP,MAGJ,IAAK,YACD,IAAIA,EAAM,2BAAOd,GAAP,IAAYF,MAAOnB,EAAOiB,SACpCK,EAAOa,GACP,MAEJ,IAAK,YACD,IAAIA,EAAM,2BAAOd,GAAP,IAAYD,gBAAiBpB,EAAOiB,SAC9CK,EAAOa,UAgBf,qBAAKC,gBAAiB,OACjB9B,UAAW,kBCzCb+B,MATf,WACE,OACI,sBAAK/B,UAAU,YAAf,UACE,8DACA,cAAC,EAAD,QCKOgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BX,M","file":"static/js/main.28741fe8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ChangeTextProperties.css'\r\n\r\ntype PropsType = {\r\n    formatText(f: string, value: string): void\r\n    toJSON: () => void\r\n}\r\nconst fontSizeArray = [\r\n    {key: 0, value: 'font size'}, {key: 1, value: '10px'}, {key: 2, value: '12px'}, {\r\n        key: 3,\r\n        value: '14px'\r\n    }, {key: 4, value: '18px'},\r\n    {key: 5, value: '24px'}, {key: 6, value: '36px'}, {key: 7, value: '48px'},\r\n\r\n]\r\nconst colorArray = [\r\n    'color', 'red', 'green', 'yellow', 'blue', 'black', 'brown', 'greenyellow', 'pink'\r\n]\r\n\r\nconst bgColorArray = [\r\n    'background color', 'red', 'green', 'yellow', 'blue', 'black', 'brown', 'greenyellow', 'pink'\r\n]\r\n\r\nexport const ChangeTextProperties = ({ formatText, toJSON}: PropsType) => {\r\n    return (\r\n        <>\r\n            <div className={'selectFields'}>\r\n                <select className={'selectItems'}\r\n                        onChange={(e) => formatText('fontSize', e.currentTarget[+e.currentTarget.value].innerHTML)}>\r\n                    font size\r\n                    {fontSizeArray.map(f => <option key={f.key} value={f.key}>{f.value}</option>)}\r\n                </select>\r\n                <select className={'selectItems'}\r\n                        onChange={(e) => formatText('foreColor', e.currentTarget.value)}> color\r\n                    {colorArray.map(c => <option key={c} value={c}>{c}</option>)}\r\n                </select>\r\n                <select className={'selectItems'} onChange={(e) => formatText('backColor', e.currentTarget.value)}>\r\n                    background color\r\n                    {bgColorArray.map(c => <option key={c} value={c}>{c}</option>)}\r\n                </select>\r\n\r\n                <button onClick={toJSON} className={'buttonToJSON'}>Convert to JSON</button>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport { ChangeTextProperties } from './ChangeTextProperties/ChangeTextProperties';\r\nimport './Content.css'\r\n\r\n\r\n\r\nexport const Content = () => {\r\n\r\n\r\n    const [obj, setObj] = useState({\r\n        text: '',\r\n        fontSize: '10px',\r\n        color: 'black',\r\n        backgroundColor: 'black'\r\n    })\r\n\r\n\r\n    const formatText = (sCnd: string, value: string): void => {\r\n\r\n\r\n\r\n        document.execCommand(sCnd, false, value)\r\n        document.execCommand('copy');\r\n        navigator.clipboard.readText().then(text => {\r\n            switch (sCnd) {\r\n                case 'fontSize': {\r\n                    let newObj = {...obj, fontSize: value, text}\r\n                    setObj(newObj)\r\n                    break\r\n                }\r\n\r\n                case 'foreColor': {\r\n                    let newObj = {...obj, color: value, text}\r\n                    setObj(newObj)\r\n                    break\r\n                }\r\n                case 'backColor': {\r\n                    let newObj = {...obj, backgroundColor: value, text}\r\n                    setObj(newObj)\r\n                    break\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const toJSON = () => {\r\n        const json = JSON.stringify(obj)\r\n        console.log(json)\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <ChangeTextProperties toJSON={toJSON} formatText={formatText}/>\r\n            <div contentEditable={'true'}\r\n                 className={'textarea'}>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Content} from './components/Content/Content';\n\n\nfunction App() {\n  return (\n      <div className=\"container\">\n        <h1>Text Editor with React Hooks</h1>\n        <Content  />\n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}